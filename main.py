import csv
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
# from apscheduler.schedulers.asyncio import AsyncIOSchedulerip
from dotenv import load
from sqllite import Database
from yandex_pay import payment_yandex, sucsess_pay
import os


load()

storage = MemoryStorage()
bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=storage)
db = Database('database.db')


PRICE_BOOK = 500
PRICE_BOOK_TEST = 10


class StateUsersData(StatesGroup):
    promo_code_state = State()


def get_keyboard_buy():
    ikb = InlineKeyboardMarkup(row_width=1)
    ib = InlineKeyboardButton('üìö –ö—É–ø–∏—Ç—å –∫–Ω–∏–≥—É', callback_data='buy_book')
    ikb.add(ib)
    return ikb


def get_keyboard_buy_book(summa, label_user):
    ikb = InlineKeyboardMarkup(row_width=1)
    ib = InlineKeyboardButton('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=payment_yandex(summa, label_user))
    ib1 = InlineKeyboardButton('‚úÖ –Ø –û–ü–õ–ê–¢–ò–õ', callback_data=f"check_pay_{label_user}")
    ikb.add(ib, ib1)
    return ikb


# def get_keyboard_channel():
#     ikb = InlineKeyboardMarkup(row_width=1)
#     ib = InlineKeyboardButton('üìö –ó–ê–ë–†–ê–¢–¨ –ö–ù–ò–ì–£', url='https://t.me/+OUYy6zhO8DE0MWYy')
#     ikb.add(ib)
#     return ikb


def get_keyboard_yes():
    rkb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb = KeyboardButton('–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ üòî')
    rkb.add(kb)
    return rkb


def get_keyboard_next():
    rkb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb = KeyboardButton('–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ üòî')
    rkb.add(kb)
    return rkb

# async def apschedule_check_pay():
#     await sucsess_pay()


@dp.message_handler(commands='start')
async def command_start_process(message: types.Message):
    # db.create_tables()
    parent = message.text[7:]
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id, parent, message.from_user.username)
    text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å! –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∞–≤—Ç–æ—Ä—Å–∫—É –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–ø–∏—Å–∞–ª —á–µ–ª–æ–≤–µ–∫ –±—É–¥—É—á–∏ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–ø–æ–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–ª–∏–ª—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 3 –º–µ—Å—è—Ü–∞\n\n<b>–ö–∞–∫ —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º?</b>\n\n–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: <b>–ê—Ä–Ω–æ–ª—å–¥ –ö–æ—Ö</b>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ <b>{PRICE_BOOK}</b> —Ä—É–±–ª–µ–π"
    await message.answer_photo(photo="https://2books.su/assets/img/covers/the-snow-queen-adapted.jpg",
                               caption=text, 
                               reply_markup=get_keyboard_buy())


# @dp.message_handler(commands='check')
# async def check_pay(message: types.Message):
#     await message.answer('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª, –¥–µ—Ä–∂–∏ —Å–≤–æ—é –∫–Ω–∏–≥—É')
#     db.set_pay(message.from_user.id)
#     await bot.send_document(chat_id=message.from_user.id, document=open("./Book_by_Test.pdf", "rb"), caption="–ö–∞–∫–æ–π —Ç–æ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")


@dp.message_handler(commands=['friends'])
async def get_friends(message: types.Message):
    result = db.get_parent(message.from_user.id)
    text = f"–í–∞—à–∞ –ø–∞—Ä–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/HitchhikerRussia_bot?start={message.from_user.id}\n\n–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å {len(result)} —á–µ–ª–æ–≤–µ–∫"
    await message.answer(text, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands=['add_promo_code'])
async def add_promocode(message: types.Message):
    try:
        command, promocode, procent = message.text.split()
        db.add_promocode(promocode, procent)
        await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ {promocode} –Ω–∞ —Å–∫–∏–¥–∫—É {procent}% –¥–æ–±–∞–≤–ª–µ–Ω')
    except Exception as e:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ /add_promo_code –ù–ê–ó–í–ê–ù–ò–ï(–¢–ï–ö–°–¢ –ê–ù–ì–õ –ò–õ–ò –†–£–°) –ü–†–û–¶–ï–ù–¢ –°–ö–ò–î–ö–ò(–ß–ò–°–õ–û) ')


@dp.message_handler(commands=['del_promo_code'])
async def add_promocode(message: types.Message):
    try:
        command, id = message.text.split()
        db.del_promocode(id)
        await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω \n–ü–æ—Å–æ–º—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n/get_promocode')
    except Exception as e:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ /del_promo_code –ê–ô–î–ò –ü–†–û–ú–û–ö–û–î–ê')


@dp.message_handler(commands=['get_users'])
async def get_users_in_file(message: types.Message):
    await message.answer('–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–û–∂–∏–¥–∞–π—Ç–µ...')
    result = db.get_users()
    print(result)
    fields = ['user_id', 'parent', 'pay']; 
    with open('users.csv', 'w', encoding='utf-8-sig', newline='') as state_file:
        writer = csv.writer(state_file, fields, delimiter=';')
        writer.writerows(result)
    with open('users.csv', 'rb') as state_file:
        await message.answer_document(state_file)


@dp.message_handler(commands=['get_promocode'])
async def get_users_in_file(message: types.Message):
    result = db.get_promocode()
    if result:
        text = list()
        for promo in result:
            text.append(f"id <b>{promo[0]}</b> {promo[1]} —Å–∫–∏–¥–∫–∞ {promo[2]}%\n")
        text.append(f"–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –≤–≤–µ–¥–∏—Ç–µ /del_promo_code –∏ ID")
        final_text = "".join(text)
        await message.answer(final_text)
    else:
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')


@dp.message_handler(Text(equals='–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ üòî'), state='*')
async def no_promocode(message: types.Message, state: FSMContext):
    await message.delete()
    await message.answer('–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ üòî', reply_markup=ReplyKeyboardRemove())
    await state.finish()
    label = int(message.from_user.id) + random.randint(10, 99)
    text = f"""–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥–∏ <b>{PRICE_BOOK}</b> —Ä—É–±–ª–µ–π
–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: <b>–Ω–µ—Ç</b>

<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {PRICE_BOOK} —Ä—É–±–ª–µ–π</b>"""
    await message.answer(text, reply_markup=get_keyboard_buy_book(PRICE_BOOK_TEST, label))


@dp.message_handler(state=StateUsersData.promo_code_state)
async def waiting_promocode(message: types.Message, state: FSMContext):
    result = db.check_promo_code(message.text)
    if result:
        await message.answer('‚úÖ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω', reply_markup=ReplyKeyboardRemove())
        sale = int(result[-1])
        await state.update_data(procent=sale)
        final_price = PRICE_BOOK - (PRICE_BOOK / 100 * sale)
        label = int(message.from_user.id) + random.randint(10, 99)
        text = f"""–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥–∏ <b>{PRICE_BOOK}</b> —Ä—É–±–ª–µ–π
–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: <b>{sale}%</b>

<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {int(final_price)} —Ä—É–±–ª–µ–π</b>"""
        await message.answer(text, reply_markup=get_keyboard_buy_book(PRICE_BOOK_TEST, label))
        await state.finish()
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ\n–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞', reply_markup=get_keyboard_next())


@dp.callback_query_handler(Text(equals='buy_book'))
async def callback_buy_book(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç', reply_markup=get_keyboard_yes())
    await state.set_state(StateUsersData.promo_code_state.state)


@dp.callback_query_handler(Text(startswith='check_pay_'))
async def callback_check_balance_pay(callback: types.CallbackQuery):
    label = callback.data.split('_')[-1]
    result = sucsess_pay(label)
    if result:
        await callback.message.answer('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª, –¥–µ—Ä–∂–∏ —Å–≤–æ—é –∫–Ω–∏–≥—É')
        await bot.send_document(chat_id=callback.from_user.id, document=open("./Book_by_Test.pdf", "rb"), caption="–ö–∞–∫–æ–π —Ç–æ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        db.set_pay(callback.from_user.id)
    else:
        await callback.answer('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.', show_alert=True)


if __name__ == '__main__':
    # scheduler = AsyncIOScheduler() # –ø—Ä–∏ –∑–∞–ª–∏–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É–±–∏—Ä–∞—Ç—å —Ç–∞–π–º –∑–æ–Ω—É
    # scheduler.add_job(apschedule_check_pay, "cron", seconds=5)
    # scheduler.start()
    executor.start_polling(dp, skip_updates=True)